Windows 10

Windows Host
	Create VirtualSwitch and VMs (Admin-PowerShell):
		New-VMSwitch -name HiGHmed -SwitchType Internal
		New-NetIPAddress -InterfaceAlias 'vEthernet (HiGHmed)' -IPAddress 10.42.0.1 -PrefixLength 24
		New-NetNat -Name HiGHmedNAT -InternalIPInterfaceAddressPrefix 10.42.0.0/24
		New-VM -Name "HiGHmed_DockerRegistry" -MemoryStartupBytes 2GB -NewVHDPath 'C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks\HiGHmed_DockerRegistry.vhdx' -NewVHDSizeBytes 24GB -SwitchName HiGHmed -Generation 2
		New-VM -Name "HiGHmed_TTP" -MemoryStartupBytes 2GB -NewVHDPath 'C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks\HiGHmed_TTP.vhdx' -NewVHDSizeBytes 24GB -SwitchName HiGHmed -Generation 2
		New-VM -Name "HiGHmed_MeDIC_1" -MemoryStartupBytes 2GB -NewVHDPath 'C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks\HiGHmed_MeDIC_1.vhdx' -NewVHDSizeBytes 24GB -SwitchName HiGHmed -Generation 2
		New-VM -Name "HiGHmed_MeDIC_2" -MemoryStartupBytes 2GB -NewVHDPath 'C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks\HiGHmed_MeDIC_2.vhdx' -NewVHDSizeBytes 24GB -SwitchName HiGHmed -Generation 2
		New-VM -Name "HiGHmed_MeDIC_3" -MemoryStartupBytes 2GB -NewVHDPath 'C:\Users\Public\Documents\Hyper-V\Virtual Hard Disks\HiGHmed_MeDIC_3.vhdx' -NewVHDSizeBytes 24GB -SwitchName HiGHmed -Generation 2
		Set-VMProcessor -VMName "HiGHmed_DockerRegistry" -Count 2
		Set-VMProcessor -VMName "HiGHmed_TTP" -Count 2
		Set-VMProcessor -VMName "HiGHmed_MeDIC_1" -Count 2
		Set-VMProcessor -VMName "HiGHmed_MeDIC_2" -Count 2
		Set-VMProcessor -VMName "HiGHmed_MeDIC_3" -Count 2
		Add-VMDvdDrive -VMName 'HiGHmed_DockerRegistry' -Path $HOME\Downloads\ubuntu-18.04.2-live-server-amd64.iso
		Add-VMDvdDrive -VMName 'HiGHmed_TTP' -Path $HOME\Downloads\ubuntu-18.04.2-live-server-amd64.iso
		Add-VMDvdDrive -VMName 'HiGHmed_MeDIC_1' -Path $HOME\Downloads\ubuntu-18.04.2-live-server-amd64.iso
		Add-VMDvdDrive -VMName 'HiGHmed_MeDIC_2' -Path $HOME\Downloads\ubuntu-18.04.2-live-server-amd64.iso
		Add-VMDvdDrive -VMName 'HiGHmed_MeDIC_3' -Path $HOME\Downloads\ubuntu-18.04.2-live-server-amd64.iso
		Set-VMFirmware -VMName "HiGHmed_DockerRegistry" -BootOrder $(Get-VMDvdDrive -VMName "HiGHmed_DockerRegistry"),$(Get-VMHardDiskDrive -VMName "HiGHmed_DockerRegistry"),$(Get-VMNetworkAdapter -VMName "HiGHmed_DockerRegistry") -SecureBootTemplate MicrosoftUEFICertificateAuthority
		Set-VMFirmware -VMName "HiGHmed_TTP" -BootOrder $(Get-VMDvdDrive -VMName "HiGHmed_TTP"),$(Get-VMHardDiskDrive -VMName "HiGHmed_TTP"),$(Get-VMNetworkAdapter -VMName "HiGHmed_TTP") -SecureBootTemplate MicrosoftUEFICertificateAuthority
		Set-VMFirmware -VMName "HiGHmed_MeDIC_1" -BootOrder $(Get-VMDvdDrive -VMName "HiGHmed_MeDIC_1"),$(Get-VMHardDiskDrive -VMName "HiGHmed_MeDIC_1"),$(Get-VMNetworkAdapter -VMName "HiGHmed_MeDIC_1") -SecureBootTemplate MicrosoftUEFICertificateAuthority
		Set-VMFirmware -VMName "HiGHmed_MeDIC_2" -BootOrder $(Get-VMDvdDrive -VMName "HiGHmed_MeDIC_2"),$(Get-VMHardDiskDrive -VMName "HiGHmed_MeDIC_2"),$(Get-VMNetworkAdapter -VMName "HiGHmed_MeDIC_2") -SecureBootTemplate MicrosoftUEFICertificateAuthority
		Set-VMFirmware -VMName "HiGHmed_MeDIC_3" -BootOrder $(Get-VMDvdDrive -VMName "HiGHmed_MeDIC_3"),$(Get-VMHardDiskDrive -VMName "HiGHmed_MeDIC_3"),$(Get-VMNetworkAdapter -VMName "HiGHmed_MeDIC_3") -SecureBootTemplate MicrosoftUEFICertificateAuthority
		Set-VMMemory -VMName "HiGHmed_DockerRegistry" -MaximumBytes 2GB
		Set-VMMemory -VMName "HiGHmed_TTP" -MaximumBytes 4GB
		Set-VMMemory -VMName "HiGHmed_MeDIC_1" -MaximumBytes 4GB
		Set-VMMemory -VMName "HiGHmed_MeDIC_2" -MaximumBytes 4GB
		Set-VMMemory -VMName "HiGHmed_MeDIC_3" -MaximumBytes 4GB

VMs (Setup Ubuntu Server)
	Start-VM -VMName "HiGHmed_DockerRegistry"
	vmconnect localhost "HiGHmed_DockerRegistry"
	
	Start-VM -VMName "HiGHmed_TTP"
	vmconnect localhost "HiGHmed_TTP"
	
	Start-VM -VMName "HiGHmed_MeDIC_1"
	vmconnect localhost "HiGHmed_MeDIC_1"
	
	Start-VM -VMName "HiGHmed_MeDIC_2"
	vmconnect localhost "HiGHmed_MeDIC_2"
	
	Start-VM -VMName "HiGHmed_MeDIC_3"
	vmconnect localhost "HiGHmed_MeDIC_3"

	Setup Ubuntu 18.04.2 (manual)
	Network:
		Subnet: 10.42.0.0/24
		Address: 10.42.0.{9,10,11,12,13}
		Gateway: 10.42.0.1
		DNS: 8.8.8.8
	Hostname: {registry, ttp, medic1, medic2, medic3}
	Username same as WSL username
	Install OpenSSH Server
	
	login to console and set sudo without password
	sudo visudo
	change
	%sudo	ALL=(ALL:ALL) ALL
	to
	%sudo	ALL=(ALL:ALL) NOPASSWD:ALL
	

Windows Host
	add {registry, ttp, medic1, medic2, medic3} to %windir%\system32\drivers\etc\hosts IPs: 10.24.0. {9, 10,11,12,13}
	Restart WSL (Admin-PowerShell):
		Restart-Service LxssManager

Windows Host - WSL (Ubuntu)
	ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519 -C "hhund" [create ssh key]

	ssh-agent bash
	ssh-add ~/.ssh/id_ed25519

	ssh-copy-id {host} [add ssh key to {ttp, medic1, medic2, medic3}]
	
	sudo apt-add-repository ppa:ansible/ansible
	sudo apt install ansible
	
	sudo nano /etc/ansible/hosts
		[HiGHmed]
		registry
		ttp
		medic1
		medic2
		medic3
	
	ansible-playbook highmed.yml

DockerRegistry
	ssh registry
	docker run -d -p 5000:5000 --restart always --name registry registry:latest
	
Windows Host
	Docker -> Preferences -> Daemon
	add insecure registry:
		registry:5000
		
Upload Config Files
	ansible-playbook medic1/upload.yml medic2/upload.yml medic3/upload.yml ttp/upload.yml

FHIR Docker
	docker build -t highmed/fhir .
	docker tag highmed/fhir:latest registry:5000/highmed/fhir:latest
	docker push registry:5000/highmed/fhir
	
FHIR Proxy Docker
	docker build -t highmed/fhir_proxy .
	docker tag highmed/fhir_proxy:latest registry:5000/highmed/fhir_proxy:latest
	docker push registry:5000/highmed/fhir_proxy
	
BPE Docker
	docker build -t highmed/bpe .
	docker tag highmed/bpe:latest registry:5000/highmed/bpe:latest
	docker push registry:5000/highmed/bpe

BPE Proxy Docker
	docker build -t highmed/bpe_proxy .
	docker tag highmed/bpe_proxy:latest registry:5000/highmed/bpe_proxy:latest
	docker push registry:5000/highmed/bpe_proxy

	
Shutdown all:
	ansible HiGHmed -a "shutdown -h now" --become